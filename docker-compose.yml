x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"

networks:
  main:
    name: ${PROJECT_TAG}-main
    driver: bridge

volumes:
  rabbitmq-data:
    name: ${PROJECT_TAG}-rabbitmq-data
  postgres-data:
    name: ${PROJECT_TAG}-postgres-data
  prometheus-data:
    name: ${PROJECT_TAG}-prometheus-data
  grafana-storage:
    name: ${PROJECT_TAG}-grafana-storage
  redis-data:
    name: ${PROJECT_TAG}-redis-data

secrets:
  grafana:
    file: ./secrets/grafana.txt
  smtp:
    file: ./secrets/smtp.txt
  access-token:
    file: ./secrets/access-token.txt
  refresh-token:
    file: ./secrets/refresh-token.txt

services:
  grafana:
    build:
      context: ./infrastructure/grafana
    container_name: ${PROJECT_TAG}-grafana
    networks:
      - main
    ports:
      - 9000:3000
    volumes:
      - grafana-storage:/var/lib/grafana
    secrets:
      - grafana
    depends_on:
      prometheus:
        condition: service_started
    deploy:
      resources:
        limits:
          cpus: '0.500'
          memory: 512M
        reservations:
          cpus: '0.125'
          memory: 128M
    logging: *default-logging
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
  prometheus:
    build:
      context: ./infrastructure/prometheus
    container_name: ${PROJECT_TAG}-prometheus
    networks:
      - main
    expose:
      - 9090
    volumes:
      - prometheus-data:/prometheus
    depends_on:
      redis-exporter:
        condition: service_started
      postgres-exporter:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '0.250'
          memory: 256M
        reservations:
          cpus: '0.125'
          memory: 64M
    logging: *default-logging

  nginx:
    build:
      context: ./infrastructure/nginx
    container_name: ${PROJECT_TAG}-nginx
    networks:
      - main
    expose:
      - ${NGINX_PORT}
    ports:
      - ${NGINX_PORT}:${NGINX_PORT}
      - ${NGINX_SSL_PORT}:${NGINX_SSL_PORT}
    depends_on:
      api:
        condition: service_started
      mailer:
        condition: service_started
    deploy:
      resources:
        limits:
          cpus: '0.250'
          memory: 256M
        reservations:
          cpus: '0.125'
          memory: 64M
    logging: *default-logging
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8008/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    build:
      context: ./infrastructure/rabbitmq
    container_name: ${PROJECT_TAG}_rabbitmq
    networks:
      - main
    expose:
      - ${RABBITMQ_PORT}
      - 15692
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    deploy:
      resources:
        limits:
          cpus: '0.500'
          memory: 512M
        reservations:
          cpus: '0.125'
          memory: 128M
    logging: *default-logging
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_running"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres:
    build:
      context: ./infrastructure/postgres
    container_name: ${PROJECT_TAG}-postgres
    networks:
      - main
    expose:
      - ${POSTGRES_PORT}
    volumes:
      - postgres-data:/var/lib/postgresql
    deploy:
      resources:
        limits:
          cpus: '1.000'
          memory: 1024M
        reservations:
          cpus: '0.250'
          memory: 256M
    logging: *default-logging
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter
    container_name: ${PROJECT_TAG}-postgres-exporter
    networks:
      - main
    expose:
      - 9187
    environment:
      - TZ
      - DATA_SOURCE_URI=${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}?sslmode=disable
      - DATA_SOURCE_USER=${POSTGRES_USER}
      - DATA_SOURCE_PASS=${POSTGRES_PASSWORD}
    depends_on:
      postgres:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '0.250'
          memory: 256M
        reservations:
          cpus: '0.125'
          memory: 64M
    logging: *default-logging

  redis:
    build:
      context: ./infrastructure/redis
    container_name: ${PROJECT_TAG}-redis
    networks:
      - main
    expose:
      - ${REDIS_PORT}
    volumes:
      - redis-data:/data
    deploy:
      resources:
        limits:
          cpus: '1.000'
          memory: 1024M
        reservations:
          cpus: '0.250'
          memory: 256M
    logging: *default-logging
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
  redis-exporter:
    image: oliver006/redis_exporter
    container_name: ${PROJECT_TAG}-redis-exporter
    networks:
      - main
    expose:
      - 9121
    environment:
      - TZ
      - REDIS_ADDR=redis://${REDIS_HOST}:${REDIS_PORT}
      - REDIS_USER
      - REDIS_PASSWORD
    depends_on:
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '0.250'
          memory: 256M
        reservations:
          cpus: '0.125'
          memory: 64M
    logging: *default-logging

  api:
    build:
      context: .
      dockerfile: ./apps/backend/api/Dockerfile
    container_name: ${PROJECT_TAG}-api
    networks:
      - main
    expose:
      - ${API_PORT}
    secrets:
      - access-token
      - refresh-token
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '1.000'
          memory: 1024M
        reservations:
          cpus: '0.250'
          memory: 256M
    logging: *default-logging
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://${API_HOST}:${API_PORT}/health"]
      interval: 10s
      timeout: 5s
      retries: 5
  mailer:
    build:
      context: .
      dockerfile: ./apps/backend/mailer/Dockerfile
    container_name: ${PROJECT_TAG}-mailer
    networks:
      - main
    expose:
      - ${MAILER_PORT}
    secrets:
      - smtp
    depends_on:
      rabbitmq:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '0.500'
          memory: 512M
        reservations:
          cpus: '0.125'
          memory: 128M
    logging: *default-logging
  panel-react:
    build:
      context: .
      dockerfile: ./apps/frontend/panel-react/Dockerfile
    container_name: ${PROJECT_TAG}-panel-react
    networks:
      - main
    expose:
      - ${PANEL_REACT_PORT}
    environment:
      - HOSTNAME=${PANEL_REACT_HOST}
      - PORT=${PANEL_REACT_PORT}
    logging: *default-logging
  panel-vue:
    build:
      context: .
      dockerfile: ./apps/frontend/panel-vue/Dockerfile
    container_name: ${PROJECT_TAG}-panel-vue
    networks:
      - main
    expose:
      - ${PANEL_VUE_PORT}
    environment:
      - HOSTNAME=${PANEL_VUE_HOST}
      - PORT=${PANEL_VUE_PORT}
    logging: *default-logging
